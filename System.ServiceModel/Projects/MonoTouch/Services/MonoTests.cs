//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.5448
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This code was auto-generated by slsvcutil, version 3.0.40818.0
// 
namespace MonoTestServer.WCF
{
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="MonoFault", Namespace="http://schemas.datacontract.org/2004/07/MonoTestServer.WCF")]
    public partial class MonoFault : object
    {
        
        private string MessageField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Message
        {
            get
            {
                return this.MessageField;
            }
            set
            {
                this.MessageField = value;
            }
        }
    }
}


[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
[System.ServiceModel.ServiceContractAttribute(Namespace="http://www.mono-project.com", ConfigurationName="IMonoTests")]
public interface IMonoTests
{
    
    [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.mono-project.com/IMonoTests/ThrowMonoFault", ReplyAction="http://www.mono-project.com/IMonoTests/ThrowMonoFaultResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(MonoTestServer.WCF.MonoFault), Action="http://www.mono-project.com/MonoFault", Name="MonoFault", Namespace="http://schemas.datacontract.org/2004/07/MonoTestServer.WCF")]
    System.IAsyncResult BeginThrowMonoFault(string message, System.AsyncCallback callback, object asyncState);
    
    void EndThrowMonoFault(System.IAsyncResult result);
}

[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
public interface IMonoTestsChannel : IMonoTests, System.ServiceModel.IClientChannel
{
}

[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
public partial class MonoTestsClient : System.ServiceModel.ClientBase<IMonoTests>, IMonoTests
{
    
    private BeginOperationDelegate onBeginThrowMonoFaultDelegate;
    
    private EndOperationDelegate onEndThrowMonoFaultDelegate;
    
    private System.Threading.SendOrPostCallback onThrowMonoFaultCompletedDelegate;
    
    private BeginOperationDelegate onBeginOpenDelegate;
    
    private EndOperationDelegate onEndOpenDelegate;
    
    private System.Threading.SendOrPostCallback onOpenCompletedDelegate;
    
    private BeginOperationDelegate onBeginCloseDelegate;
    
    private EndOperationDelegate onEndCloseDelegate;
    
    private System.Threading.SendOrPostCallback onCloseCompletedDelegate;
    
    public MonoTestsClient()
    {
    }
    
    public MonoTestsClient(string endpointConfigurationName) : 
            base(endpointConfigurationName)
    {
    }
    
    public MonoTestsClient(string endpointConfigurationName, string remoteAddress) : 
            base(endpointConfigurationName, remoteAddress)
    {
    }
    
    public MonoTestsClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
            base(endpointConfigurationName, remoteAddress)
    {
    }
    
    public MonoTestsClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
            base(binding, remoteAddress)
    {
    }
    
    public System.Net.CookieContainer CookieContainer
    {
        get
        {
            System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
            if ((httpCookieContainerManager != null))
            {
                return httpCookieContainerManager.CookieContainer;
            }
            else
            {
                return null;
            }
        }
        set
        {
            System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
            if ((httpCookieContainerManager != null))
            {
                httpCookieContainerManager.CookieContainer = value;
            }
            else
            {
                throw new System.InvalidOperationException("Unable to set the CookieContainer. Please make sure the binding contains an HttpC" +
                        "ookieContainerBindingElement.");
            }
        }
    }
    
    public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> ThrowMonoFaultCompleted;
    
    public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> OpenCompleted;
    
    public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> CloseCompleted;
    
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    System.IAsyncResult IMonoTests.BeginThrowMonoFault(string message, System.AsyncCallback callback, object asyncState)
    {
        return base.Channel.BeginThrowMonoFault(message, callback, asyncState);
    }
    
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    void IMonoTests.EndThrowMonoFault(System.IAsyncResult result)
    {
        base.Channel.EndThrowMonoFault(result);
    }
    
    private System.IAsyncResult OnBeginThrowMonoFault(object[] inValues, System.AsyncCallback callback, object asyncState)
    {
        string message = ((string)(inValues[0]));
        return ((IMonoTests)(this)).BeginThrowMonoFault(message, callback, asyncState);
    }
    
    private object[] OnEndThrowMonoFault(System.IAsyncResult result)
    {
        ((IMonoTests)(this)).EndThrowMonoFault(result);
        return null;
    }
    
    private void OnThrowMonoFaultCompleted(object state)
    {
        if ((this.ThrowMonoFaultCompleted != null))
        {
            InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
            this.ThrowMonoFaultCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
        }
    }
    
    public void ThrowMonoFaultAsync(string message)
    {
        this.ThrowMonoFaultAsync(message, null);
    }
    
    public void ThrowMonoFaultAsync(string message, object userState)
    {
        if ((this.onBeginThrowMonoFaultDelegate == null))
        {
            this.onBeginThrowMonoFaultDelegate = new BeginOperationDelegate(this.OnBeginThrowMonoFault);
        }
        if ((this.onEndThrowMonoFaultDelegate == null))
        {
            this.onEndThrowMonoFaultDelegate = new EndOperationDelegate(this.OnEndThrowMonoFault);
        }
        if ((this.onThrowMonoFaultCompletedDelegate == null))
        {
            this.onThrowMonoFaultCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnThrowMonoFaultCompleted);
        }
        base.InvokeAsync(this.onBeginThrowMonoFaultDelegate, new object[] {
                    message}, this.onEndThrowMonoFaultDelegate, this.onThrowMonoFaultCompletedDelegate, userState);
    }
    
    private System.IAsyncResult OnBeginOpen(object[] inValues, System.AsyncCallback callback, object asyncState)
    {
        return ((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(callback, asyncState);
    }
    
    private object[] OnEndOpen(System.IAsyncResult result)
    {
        ((System.ServiceModel.ICommunicationObject)(this)).EndOpen(result);
        return null;
    }
    
    private void OnOpenCompleted(object state)
    {
        if ((this.OpenCompleted != null))
        {
            InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
            this.OpenCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
        }
    }
    
    public void OpenAsync()
    {
        this.OpenAsync(null);
    }
    
    public void OpenAsync(object userState)
    {
        if ((this.onBeginOpenDelegate == null))
        {
            this.onBeginOpenDelegate = new BeginOperationDelegate(this.OnBeginOpen);
        }
        if ((this.onEndOpenDelegate == null))
        {
            this.onEndOpenDelegate = new EndOperationDelegate(this.OnEndOpen);
        }
        if ((this.onOpenCompletedDelegate == null))
        {
            this.onOpenCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnOpenCompleted);
        }
        base.InvokeAsync(this.onBeginOpenDelegate, null, this.onEndOpenDelegate, this.onOpenCompletedDelegate, userState);
    }
    
    private System.IAsyncResult OnBeginClose(object[] inValues, System.AsyncCallback callback, object asyncState)
    {
        return ((System.ServiceModel.ICommunicationObject)(this)).BeginClose(callback, asyncState);
    }
    
    private object[] OnEndClose(System.IAsyncResult result)
    {
        ((System.ServiceModel.ICommunicationObject)(this)).EndClose(result);
        return null;
    }
    
    private void OnCloseCompleted(object state)
    {
        if ((this.CloseCompleted != null))
        {
            InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
            this.CloseCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
        }
    }
    
    public void CloseAsync()
    {
        this.CloseAsync(null);
    }
    
    public void CloseAsync(object userState)
    {
        if ((this.onBeginCloseDelegate == null))
        {
            this.onBeginCloseDelegate = new BeginOperationDelegate(this.OnBeginClose);
        }
        if ((this.onEndCloseDelegate == null))
        {
            this.onEndCloseDelegate = new EndOperationDelegate(this.OnEndClose);
        }
        if ((this.onCloseCompletedDelegate == null))
        {
            this.onCloseCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCloseCompleted);
        }
        base.InvokeAsync(this.onBeginCloseDelegate, null, this.onEndCloseDelegate, this.onCloseCompletedDelegate, userState);
    }
    
    protected override IMonoTests CreateChannel()
    {
        return new MonoTestsClientChannel(this);
    }
    
    private class MonoTestsClientChannel : ChannelBase<IMonoTests>, IMonoTests
    {
        
        public MonoTestsClientChannel(System.ServiceModel.ClientBase<IMonoTests> client) : 
                base(client)
        {
        }
        
        public System.IAsyncResult BeginThrowMonoFault(string message, System.AsyncCallback callback, object asyncState)
        {
            object[] _args = new object[1];
            _args[0] = message;
            System.IAsyncResult _result = base.BeginInvoke("ThrowMonoFault", _args, callback, asyncState);
            return _result;
        }
        
        public void EndThrowMonoFault(System.IAsyncResult result)
        {
            object[] _args = new object[0];
            base.EndInvoke("ThrowMonoFault", _args, result);
        }
    }
}
