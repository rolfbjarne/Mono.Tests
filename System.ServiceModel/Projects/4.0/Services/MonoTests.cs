//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.239
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MonoTestServer.WCF
{
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="MonoFault", Namespace="http://schemas.datacontract.org/2004/07/MonoTestServer.WCF")]
    public partial class MonoFault : object, System.Runtime.Serialization.IExtensibleDataObject
    {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private string MessageField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Message
        {
            get
            {
                return this.MessageField;
            }
            set
            {
                this.MessageField = value;
            }
        }
    }
}


[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
[System.ServiceModel.ServiceContractAttribute(Namespace="http://www.mono-project.com", ConfigurationName="IMonoTests")]
public interface IMonoTests
{
    
    [System.ServiceModel.OperationContractAttribute(Action="http://www.mono-project.com/IMonoTests/ThrowMonoFault", ReplyAction="http://www.mono-project.com/IMonoTests/ThrowMonoFaultResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(MonoTestServer.WCF.MonoFault), Action="http://www.mono-project.com/MonoFault", Name="MonoFault", Namespace="http://schemas.datacontract.org/2004/07/MonoTestServer.WCF")]
    void ThrowMonoFault(string message);
    
    [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.mono-project.com/IMonoTests/ThrowMonoFault", ReplyAction="http://www.mono-project.com/IMonoTests/ThrowMonoFaultResponse")]
    System.IAsyncResult BeginThrowMonoFault(string message, System.AsyncCallback callback, object asyncState);
    
    void EndThrowMonoFault(System.IAsyncResult result);
}

[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
public interface IMonoTestsChannel : IMonoTests, System.ServiceModel.IClientChannel
{
}

[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
public partial class MonoTestsClient : System.ServiceModel.ClientBase<IMonoTests>, IMonoTests
{
    
    private BeginOperationDelegate onBeginThrowMonoFaultDelegate;
    
    private EndOperationDelegate onEndThrowMonoFaultDelegate;
    
    private System.Threading.SendOrPostCallback onThrowMonoFaultCompletedDelegate;
    
    public MonoTestsClient()
    {
    }
    
    public MonoTestsClient(string endpointConfigurationName) : 
            base(endpointConfigurationName)
    {
    }
    
    public MonoTestsClient(string endpointConfigurationName, string remoteAddress) : 
            base(endpointConfigurationName, remoteAddress)
    {
    }
    
    public MonoTestsClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
            base(endpointConfigurationName, remoteAddress)
    {
    }
    
    public MonoTestsClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
            base(binding, remoteAddress)
    {
    }
    
    public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> ThrowMonoFaultCompleted;
    
    public void ThrowMonoFault(string message)
    {
        base.Channel.ThrowMonoFault(message);
    }
    
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    public System.IAsyncResult BeginThrowMonoFault(string message, System.AsyncCallback callback, object asyncState)
    {
        return base.Channel.BeginThrowMonoFault(message, callback, asyncState);
    }
    
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    public void EndThrowMonoFault(System.IAsyncResult result)
    {
        base.Channel.EndThrowMonoFault(result);
    }
    
    private System.IAsyncResult OnBeginThrowMonoFault(object[] inValues, System.AsyncCallback callback, object asyncState)
    {
        string message = ((string)(inValues[0]));
        return this.BeginThrowMonoFault(message, callback, asyncState);
    }
    
    private object[] OnEndThrowMonoFault(System.IAsyncResult result)
    {
        this.EndThrowMonoFault(result);
        return null;
    }
    
    private void OnThrowMonoFaultCompleted(object state)
    {
        if ((this.ThrowMonoFaultCompleted != null))
        {
            InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
            this.ThrowMonoFaultCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
        }
    }
    
    public void ThrowMonoFaultAsync(string message)
    {
        this.ThrowMonoFaultAsync(message, null);
    }
    
    public void ThrowMonoFaultAsync(string message, object userState)
    {
        if ((this.onBeginThrowMonoFaultDelegate == null))
        {
            this.onBeginThrowMonoFaultDelegate = new BeginOperationDelegate(this.OnBeginThrowMonoFault);
        }
        if ((this.onEndThrowMonoFaultDelegate == null))
        {
            this.onEndThrowMonoFaultDelegate = new EndOperationDelegate(this.OnEndThrowMonoFault);
        }
        if ((this.onThrowMonoFaultCompletedDelegate == null))
        {
            this.onThrowMonoFaultCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnThrowMonoFaultCompleted);
        }
        base.InvokeAsync(this.onBeginThrowMonoFaultDelegate, new object[] {
                    message}, this.onEndThrowMonoFaultDelegate, this.onThrowMonoFaultCompletedDelegate, userState);
    }
}
